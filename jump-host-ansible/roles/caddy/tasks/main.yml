---
- name: Include PowerDNS secrets
  include_vars: vars/secret.yml

- name: Ensure Caddy directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/caddy
    - /var/log/caddy
    - /var/lib/caddy

- name: Read current installed Caddy version (if exists)
  stat:
    path: /etc/caddy/VERSION
  register: caddy_version_file

- name: Load current installed version
  command: cat /etc/caddy/VERSION
  register: installed_version
  when: caddy_version_file.stat.exists
  changed_when: false
  failed_when: false

- name: Get latest Caddy release tag from GitHub (Atom feed)
  shell: |
    curl -s https://github.com/Yornik/powerdns-caddy/releases.atom | \
    grep -m1 '<title>' | sed 's/<[^>]*>//g'
  register: latest_release_tag
  changed_when: false

- name: Set release tag fact
  set_fact:
    caddy_release_tag: "{{ latest_release_tag.stdout | trim }}"

- name: Compare installed and latest versions
  set_fact:
    caddy_needs_update: "{{ installed_version.stdout != caddy_release_tag }}"
  when: caddy_version_file.stat.exists

- name: Force install if version file does not exist
  set_fact:
    caddy_needs_update: true
  when: not caddy_version_file.stat.exists

- name: Download custom Caddy release tarball
  get_url:
    url: "https://github.com/Yornik/powerdns-caddy/releases/download/{{ caddy_release_tag }}/custom-caddy-{{ caddy_release_tag }}.tar.gz"
    dest: "/tmp/custom-caddy.tar.gz"
    mode: '0644'
  when: caddy_needs_update | default(true)

- name: Extract custom Caddy
  unarchive:
    src: "/tmp/custom-caddy.tar.gz"
    dest: "/usr/local/bin/custom-caddy"
    remote_src: yes
    creates: "/usr/local/bin/custom-caddy/caddy"
  when: caddy_needs_update | default(true)

- name: Install new Caddy binary
  copy:
    src: "/usr/local/bin/custom-caddy/caddy"
    dest: "/usr/local/bin/caddy"
    mode: '0755'
    remote_src: yes
  when: caddy_needs_update | default(true)
  notify: Restart Caddy

- name: Save installed version tag
  copy:
    content: "{{ caddy_release_tag }}"
    dest: /etc/caddy/VERSION
    mode: '0644'
  when: caddy_needs_update | default(true)

- name: Ensure Caddy directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/caddy
    - /var/log/caddy
    - /var/lib/caddy

- name: Ensure .well-known directory exists
  file:
    path: /etc/caddy/.well-known
    state: directory
    mode: '0755'

- name: Deploy dynamic security.txt
  template:
    src: security.txt.j2
    dest: /etc/caddy/.well-known/security.txt
    mode: '0644'

- name: Install systemd service for Caddy
  copy:
    src: caddy.service
    dest: /etc/systemd/system/caddy.service
    mode: '0644'
  notify: Reload systemd

- name: Deploy Caddyfile
  template:
    src: Caddyfile.j2
    dest: /etc/caddy/Caddyfile
    owner: root
    group: root
    mode: '0644'
  notify: Reload Caddy

- name: Ensure Caddy is running and enabled
  service:
    name: caddy
    state: started
    enabled: true

- name: Copy fail2ban caddy filter
  copy:
    src: caddy-4xx-abuse.conf
    dest: /etc/fail2ban/filter.d/caddy-4xx-abuse.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart fail2ban
- name: Copy fail2ban jail config
  copy:
    src: jail.d/caddy.conf
    dest: /etc/fail2ban/jail.d/caddy.conf
    owner: root
    group: root
    mode: '0644'
  notify: Restart fail2ban

- name: Configure logrotate for Caddy logs with xz (-6)
  copy:
    dest: /etc/logrotate.d/caddy
    owner: root
    group: root
    mode: '0644'
    content: |
      /var/log/caddy/*.log {
          weekly
          rotate 4
          missingok
          notifempty
          delaycompress
          compress
          compresscmd /usr/bin/xz
          compressext .xz
          compressoptions -6
          copytruncate
          create 0640 caddy adm
      }

